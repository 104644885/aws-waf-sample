{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This AWS CloudFormation template helps you provision the AWS WAF combined stack without worrying about creating and configuring the underlying AWS infrastructure. **WARNING** This template creates an AWS Lambda function, an AWS WAF Web ACL, an Amazon S3 bucket, and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you create a stack from this template. **NOTICE** Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved. Licensed under the Amazon Software License (the License). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/asl/ or in the license file accompanying this file. This file is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [{
        "Label": {
          "default": "Protection List"
        },
        "Parameters": ["ActivateHttpFloodProtectionParam", "ActivateScansProbesProtectionParam", "ActivateTorBlockingProtectionParam","ActivateBadBotProtectionParam"]
      }, {
        "Label": {
          "default": "Advanced Settings"
        },
        "Parameters": ["CloudFrontCreateAccessLogBucket", "CloudFrontAccessLogBucket", "RequestThreshold", "ErrorThreshold", "WAFBlockPeriod", "WAFQuarantinePeriod", "ReputationLists"]
      }],

      "ParameterLabels": {
        "ActivateHttpFloodProtectionParam": {
          "default": "Activate HTTP Flood Protection?"
        },
        "ActivateScansProbesProtectionParam": {
          "default": "Activate Scans & Probes Protection?"
        },
        "ActivateTorBlockingProtectionParam": {
          "default": "Activate TOR Protection?"
        },
        "ActivateBadBotProtectionParam": {
          "default": "Activate Bad Bot Protection?"
        },

        "CloudFrontCreateAccessLogBucket": {
          "default": "Create CloudFront Access Log Bucket?"
        },
        "CloudFrontAccessLogBucket": {
          "default": "CloudFront Access Log Bucket Name"
        },

        "RequestThreshold": {
          "default": "Request Threshold"
        },
        "ErrorThreshold": {
          "default": "Error Threshold"
        },
        "WAFBlockPeriod": {
          "default": "WAF Block Period"
        },
        "WAFQuarantinePeriod": {
          "default": "WAF Quarantine Period"
        },

        "ReputationLists": {
          "default": "Reputation lists sources"
        }
      }
    }
  },

  "Parameters": {
    "ActivateHttpFloodProtectionParam": {
      "Type": "String",
      "Default": "yes",
      "AllowedValues": ["yes", "no"],
      "Description": "Select yes if you want to block HTTP Flood attack. The main objective of this kind of distributed denial of service (DDoS) attack is to overburden system resources and make them unavailable to your real users or customers."
    },
    "ActivateScansProbesProtectionParam": {
      "Type": "String",
      "Default": "yes",
      "AllowedValues": ["yes", "no"],
      "Description": "Select yes if you want to block Scans & Probes sources. Internet-facing web applications are frequently scanned and probed by various sources, sometimes for good and other times to identify weaknesses."
    },
    "ActivateTorBlockingProtectionParam": {
      "Type": "String",
      "Default": "yes",
      "AllowedValues": ["yes", "no"],
      "Description": "Select yes if you want to block requests from Tor nodes. A number of organizations maintain reputation lists of IP addresses used by bad actors. Their goal is to help legitimate companies block access from specific IP addresses and protect their web applications from abuse."
    },
    "ActivateBadBotProtectionParam": {
      "Type": "String",
      "Default": "yes",
      "AllowedValues": ["yes", "no"],
      "Description": "Select yes if you want to block bad bots. These bad actors are typically automated processes: some might try to scrape your content for their own profit (content scrapers), and others might misrepresent who they are to bypass restrictions (bad bots)."
    },

    "CloudFrontCreateAccessLogBucket": {
      "Type": "String",
      "Default": "yes",
      "AllowedValues": ["yes", "no"],
      "Description": "Select Yes to create a new S3 bucket for CloudFront Access Logs. Select No if you already have an S3 bucket for CloudFront Access logs."
    },
    "CloudFrontAccessLogBucket": {
      "Type": "String",
      "Default": "",
      "Description": "Enter the name of the S3 bucket where you will store the CloudFront access logs (e.g., http://bucket.s3-aws-region.amazonaws.com)"
    },

    "RequestThreshold": {
      "Type": "Number",
      "Default": "400",
      "Description": "Enter the maximum acceptable request per second per IP address. Leave it empty to deactivate this feature. Default: 400 requests per minute"
    },
    "ErrorThreshold": {
      "Type": "Number",
      "Default": "50",
      "Description": "Enter the maximum bad requests per minute to accept, per IP. Leave it empty to deactivate this feature. Default: 50 errors per minute"
    },
    "WAFBlockPeriod": {
      "Type": "Number",
      "Default": "240",
      "Description": "Enter for how long (in minutes) IP addresses should be blocked. Default: 4 hours (240 minutes)"
    },
    "WAFQuarantinePeriod": {
      "Type": "Number",
      "Default": "240",
      "Description": "Enter for how long (in minutes) IP addresses should be kept in quarantine. Default: 4 hours (240 minutes)"
    },

    "ReputationLists": {
      "Type": "String",
      "Default": "[{\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},{\"url\":\"https://check.torproject.org/exit-addresses\",\"prefix\":\"ExitAddress \"},{\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}]",
      "Description": "IP reputation lists, in a JSON-formatted array of objects. Each object should have a 'url' property and optional 'prefix' in regular expressions format"
    }
  },

  "Conditions": {
    "HttpFloodProtectionActivated": {
      "Fn::Equals": [{
        "Ref": "ActivateHttpFloodProtectionParam"
      }, "yes"]
    },
    "ScansProbesProtectionActivated": {
      "Fn::Equals": [{
        "Ref": "ActivateScansProbesProtectionParam"
      }, "yes"]
    },
    "TorBlockingProtectionActivated": {
      "Fn::Equals": [{
        "Ref": "ActivateTorBlockingProtectionParam"
      }, "yes"]
    },
    "BadBotProtectionActivated": {
      "Fn::Equals": [{
        "Ref": "ActivateBadBotProtectionParam"
      }, "yes"]
    },
    "LogParserActivated": {
      "Fn::Or": [
        {"Condition" : "HttpFloodProtectionActivated"},
        {"Condition" : "ScansProbesProtectionActivated"}
      ]
    },
    "CreateBucket": {
      "Fn::And": [
        {"Fn::Equals": [{"Ref": "CloudFrontCreateAccessLogBucket"}, "yes"]},
        {"Condition" : "LogParserActivated"}
      ]
    }
  },

  "Resources": {
    "WAFManualBlockSet": {
      "Type": "AWS::WAF::IPSet",
      "Properties": {
        "Name": "Combined - Manual Block Set"
      }
    },
    "WAFAutoBlockSet": {
      "Type": "AWS::WAF::IPSet",
      "Properties": {
        "Name": "Combined - Auto Block Set"
      }
    },
    "WAFAutoCountSet": {
      "Type": "AWS::WAF::IPSet",
      "Properties": {
        "Name": "Combined - Auto Count Set"
      }
    },
    "WAFReputationListsSet1": {
      "Type": "AWS::WAF::IPSet",
      "Properties": {
        "Name": "Combined - IP Reputation Lists Set #1"
      }
    },
    "WAFReputationListsSet2": {
      "Type": "AWS::WAF::IPSet",
      "Properties": {
        "Name": "Combined - IP Set Reputation Lists #2"
      }
    },
    "WAFManualBlockRule": {
      "Type": "AWS::WAF::Rule",
      "DependsOn": "WAFManualBlockSet",
      "Properties": {
        "Name": "Combined - Manual Block Rule",
        "MetricName": "CombinedManualBlockRule",
        "Predicates": [{
          "DataId": {
            "Ref": "WAFManualBlockSet"
          },
          "Negated": false,
          "Type": "IPMatch"
        }]
      }
    },
    "WAFAutoBlockRule": {
      "Type": "AWS::WAF::Rule",
      "DependsOn": "WAFAutoBlockSet",
      "Properties": {
        "Name": "Combined - Auto Block Rule",
        "MetricName": "CombinedAutoBlockRule",
        "Predicates": [{
          "DataId": {
            "Ref": "WAFAutoBlockSet"
          },
          "Negated": false,
          "Type": "IPMatch"
        }]
      }
    },
    "WAFAutoCountRule": {
      "Type": "AWS::WAF::Rule",
      "DependsOn": "WAFAutoCountSet",
      "Properties": {
        "Name": "Combined - Auto Count Rule",
        "MetricName": "CombinedAutoCountRule",
        "Predicates": [{
          "DataId": {
            "Ref": "WAFAutoCountSet"
          },
          "Negated": false,
          "Type": "IPMatch"
        }]
      }
    },
    "WAFIPReputationListsRule1": {
      "Type": "AWS::WAF::Rule",
      "Properties": {
        "Name": "Combined - WAF IP Reputation Lists Rule #1",
        "MetricName": "WAFIPReputationListsRule1",
        "Predicates": [
          {
            "DataId": {
              "Ref": "WAFReputationListsSet1"
            },
            "Type": "IPMatch",
            "Negated": "false"
          }
        ]
      }
    },
    "WAFIPReputationListsRule2": {
      "Type": "AWS::WAF::Rule",
      "Properties": {
        "Name": "Combined - WAF IP Reputation Lists Rule #2",
        "MetricName": "WAFIPReputationListsRule2",
        "Predicates": [
          {
            "DataId": {
              "Ref": "WAFReputationListsSet2"
            },
            "Type": "IPMatch",
            "Negated": "false"
          }
        ]
      }
    },

    "WAFWebACL": {
      "Type": "AWS::WAF::WebACL",
      "DependsOn": ["WAFManualBlockRule", "WAFAutoBlockRule", "WAFAutoCountRule", "WAFIPReputationListsRule1", "WAFIPReputationListsRule2"],
      "Properties": {
        "Name": "Combined - Malicious Requesters",
        "DefaultAction": {
          "Type": "ALLOW"
        },
        "MetricName": "CombinedMaliciousRequesters",
        "Rules": [{
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 1,
          "RuleId": {
            "Ref": "WAFManualBlockRule"
          }
        }, {
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 2,
          "RuleId": {
            "Ref": "WAFAutoBlockRule"
          }
        }, {
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 3,
          "RuleId": {
            "Ref": "WAFIPReputationListsRule1"
          }
        }, {
          "Action": {
            "Type": "BLOCK"
          },
          "Priority": 4,
          "RuleId": {
            "Ref": "WAFIPReputationListsRule2"
          }
        }, {
          "Action": {
            "Type": "COUNT"
          },
          "Priority": 5,
          "RuleId": {
            "Ref": "WAFAutoCountRule"
          }
        }]
      }
    },
    "LambdaRoleLogParser": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "S3Access",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": "*"
            }]
          }
        }, {
          "PolicyName": "WAFAccess",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "waf:*",
              "Resource": "*"
            }]
          }
        }, {
          "PolicyName": "LogsAccess",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "logs:*",
              "Resource": "*"
            }]
          }
        }, {
          "PolicyName": "LambdAccess",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "lambda:*",
              "Resource": "*"
            }]
          }
        }, {
          "PolicyName": "CloudFormationAccess",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "cloudformation:DescribeStacks",
              "Resource": "*"
            }]
          }
        }, {
          "PolicyName": "CloudWatchAccess",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "cloudwatch:PutMetricData",
              "Resource": "*"
            }]
          }
        }]
      },
      "Condition": "LogParserActivated"
    },
    "LambdaWAFLogParserFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "LambdaRoleLogParser",
      "Properties": {
        "Description": {
          "Fn::Join": [":", [{
            "Ref": "RequestThreshold"
          }, {
            "Ref": "ErrorThreshold"
          }, {
            "Ref": "WAFBlockPeriod"
          }, {
            "Ref": "WAFQuarantinePeriod"
          }]]
        },
        "Handler": "parser.lambda_handler",
        "Role": {
          "Fn::GetAtt": ["LambdaRoleLogParser", "Arn"]
        },
        "Code": {
          "S3Bucket": {"Fn::Join": [".", [{ "Ref" : "AWS::Region" },"heitorc"]]},
          "S3Key": "waf-reactive-blacklist/parser.zip"
        },
        "Runtime": "python2.7",
        "MemorySize": "512",
        "Timeout": "60"
      },
      "Condition": "LogParserActivated"
    },
    "LambdaInvokePermissionLogParser": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "LambdaWAFLogParserFunction",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["LambdaWAFLogParserFunction", "Arn"]
        },
        "Action": "lambda:*",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        }
      },
      "Condition": "LogParserActivated"
    },
    "LambdaRoleReputationListsParser": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudWatchLogs",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "WAFGetChangeToken",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "waf:GetChangeToken",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "WAFGetAndUpdateIPSet",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "waf:GetIPSet",
                    "waf:UpdateIPSet"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:waf::",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":ipset/",
                          {
                            "Ref": "WAFReputationListsSet1"
                          }
                        ]
                    ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:waf::",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":ipset/",
                          {
                            "Ref": "WAFReputationListsSet2"
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaWAFReputationListsParserFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRoleReputationListsParser",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              ".",
              [
                "awswaf",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "waf-reputation-lists/lambda.zip"
        },
        "Runtime": "nodejs",
        "MemorySize": "512",
        "Timeout": "60"
      }
    },
    "LambdaWAFReputationListsParserEventsRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Combined - WAF Reputation Lists",
        "ScheduleExpression": "rate(1 hour)",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaWAFReputationListsParserFunction",
                "Arn"
              ]
            },
            "Id": "LambdaWAFReputationListsParserFunction",
            "Input": {
              "Fn::Join": [
                "",
                [
                  "{\"lists\":",
                  {
                      "Ref": "ReputationLists"
                  },
                  ",",
                  "\"ipSetIds\": [",
                  "\"",
                  {
                      "Ref": "WAFReputationListsSet1"
                  },
                  "\",",
                  "\"",
                  {
                      "Ref": "WAFReputationListsSet2"
                  },
                  "\"",
                  "]}"
                ]
              ]
            }
          }
        ]
      }
    },
    "LambdaInvokePermissionReputationListsParser": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaWAFReputationListsParserFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "LambdaWAFReputationListsParserEventsRule",
            "Arn"
          ]
        }
      }
    },
    "S3CloudFrontAccessLogBucket": {
      "Type": "AWS::S3::Bucket",
      "DependsOn": "LambdaWAFLogParserFunction",
      "Properties": {
        "BucketName": {
          "Ref": "CloudFrontAccessLogBucket"
        },
        "AccessControl": "Private",
        "NotificationConfiguration": {
          "LambdaConfigurations": [{
            "Event": "s3:ObjectCreated:*",
            "Filter": {
              "S3Key": {
                "Rules": [{
                  "Name": "suffix",
                  "Value": "gz"
                }]
              }
            },
            "Function": {
              "Fn::GetAtt": ["LambdaWAFLogParserFunction", "Arn"]
            }
          }]
        }
      },
      "DeletionPolicy": "Retain",
      "Condition" : "CreateBucket"
    }
  },

  "Outputs": {
    "ActivateHttpFloodProtection": {
      "Description": "Activate Rate Based Protection",
      "Value": {
        "Ref": "ActivateHttpFloodProtectionParam"
      }
    },
    "ActivateScansProbesProtection": {
      "Description": "Activate Bad Behaving Protection",
      "Value": {
        "Ref": "ActivateScansProbesProtectionParam"
      }
    },

    "CloudFrontAccessLogBucket": {
      "Description": "CloudFront Access Log Bucket",
      "Value": {
        "Ref": "CloudFrontAccessLogBucket"
      },
      "Condition": "CreateBucket"
    },

    "RequestThreshold": {
      "Description": "Request Threshold",
      "Value": {
        "Ref": "RequestThreshold"
      },
      "Condition": "LogParserActivated"
    },
    "ErrorThreshold": {
      "Description": "Error Threshold",
      "Value": {
        "Ref": "ErrorThreshold"
      },
      "Condition": "LogParserActivated"
    },
    "WAFBlockPeriod": {
      "Description": "WAF Block Period",
      "Value": {
        "Ref": "WAFBlockPeriod"
      },
      "Condition": "LogParserActivated"
    },
    "WAFQuarantinePeriod": {
      "Description": "WAF Quarantine Period",
      "Value": {
        "Ref": "WAFQuarantinePeriod"
      },
      "Condition": "LogParserActivated"
    },
    "ManualBlockIPSetID": {
      "Description": "Manual Block IP Set ID",
      "Value": {
        "Ref": "WAFManualBlockSet"
      }
    },
    "AutoBlockIPSetID": {
      "Description": "Auto Block IP Set ID",
      "Value": {
        "Ref": "WAFAutoBlockSet"
      }
    },
    "AutoCountIPSetID": {
      "Description": "Auto Count IP Set ID",
      "Value": {
        "Ref": "WAFAutoCountSet"
      }
    }
  }
}